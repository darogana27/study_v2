import json
import feedparser
from datetime import datetime
import pytz
import boto3
import urllib.request
import re
import time

# AWS クライアント作成
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('what-aws-news-article-table')
bedrock_runtime = boto3.client('bedrock-runtime')
ssm = boto3.client('ssm')

# 定数
LINE_API_URL = 'https://api.line.me/v2/bot/message/broadcast'

def get_line_token():
    """Systems Manager Parameter StoreからLINEトークンを取得"""
    try:
        response = ssm.get_parameter(Name='/what-aws-news/Line_Access_Token', WithDecryption=True)
        return response['Parameter']['Value']
    except Exception as e:
        print(f"Error getting LINE token: {e}")
        return None

def get_service_list():
    """DynamoDBからサービスリストを取得"""
    service_table = dynamodb.Table('what-aws-news-all_tag_services-table')
    response = service_table.scan()
    return [item['service_name'] for item in response.get('Items', [])]

def extract_service_name(title):
    """タイトルからサービス名を抽出"""
    services = get_service_list()
    title_lower = title.lower()
    
    # サービスリストと照合
    for service in services:
        if service.lower() in title_lower:
            return service
    
    return "Other Services"

def get_rss_feed():
    """AWSのRSSフィードから記事を取得"""
    feed_url = 'https://aws.amazon.com/new/feed/'
    
    try:
        feed = feedparser.parse(feed_url)
        if not feed.entries:
            print("Warning: No entries found in RSS feed")
            return []
            
        utc = pytz.utc
        jst = pytz.timezone('Asia/Tokyo')
        articles = []

        for entry in feed.entries[:5]:
            try:
                published_utc = datetime.strptime(entry.published, "%a, %d %b %Y %H:%M:%S %Z")
                published_jst = published_utc.replace(tzinfo=utc).astimezone(jst)
                formatted_published = published_jst.strftime('%Y/%m/%d')

                articles.append({
                    'タイトル': entry.title,
                    'URL': entry.link,
                    '公開日': formatted_published
                })
                print(f"Found article: {entry.title}")
            except Exception as e:
                print(f"Error processing feed entry: {e}")
                continue

        return articles

    except Exception as e:
        print(f"Error fetching RSS feed: {e}")
        return []

def process_article_with_bedrock(title):
    """BedrockでAI翻訳と要約を実行"""
    temperature = 0.0
    max_retries = 5
    retry_count = 0

    while retry_count < max_retries:
        try:
            prompt = f"""AWSのニュースタイトルを分析し、日本語タイトルと内容要約を作成してください。

原文タイトル:
{title}

要件:
1. タイトルの翻訳
- AWSサービス名は英語のまま
- 一般的な日本語表現を使用
- タイトルは簡潔に
- カジュアルすぎない表現を使用

2. 内容の要約
- 追加機能や改善点を端的に説明
- 「〜です。〜ます。」を使用
- 技術的な詳細を含める
- 1-3文程度で簡潔に

以下のJSON形式で出力してください：
{{{{
    "translation": "日本語タイトル",
    "summary": "内容要約"
}}}}"""

            body = {
                "anthropic_version": "bedrock-2023-05-31",
                "max_tokens": 1000,
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": temperature
            }

            response = bedrock_runtime.invoke_model(
                modelId='anthropic.claude-3-5-sonnet-20240620-v1:0',
                accept='application/json',
                contentType='application/json',
                body=json.dumps(body)
            )
            
            response_body = json.loads(response['body'].read())
            response_text = response_body['content'][0]['text']
            
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                result = json.loads(json_match.group(0))
                return result

        except Exception as e:
            print(f"Error in Bedrock processing (attempt {retry_count + 1}): {e}")
            retry_count += 1
            temperature += 0.2
            continue

    print("All translation attempts failed")
    return {
        "translation": title,
        "summary": "翻訳できなかったので詳しくは下記URLを参照してください"
    }

def send_line_message(articles_info):
    """LINE通知を送信"""
    if not articles_info:
        return
        
    token = get_line_token()
    if not token:
        print("LINE token not found")
        return

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}'
    }

    for article in articles_info:
        message = f"""AWS Update

【サービス名】
{article['サービス名']}

【更新内容】
{article['更新内容']}

【詳細はこちら】
{article['URL']}"""

        data = {
            'messages': [{
                'type': 'text',
                'text': message
            }]
        }
        
        try:
            req = urllib.request.Request(
                LINE_API_URL,
                data=json.dumps(data).encode('utf-8'),
                headers=headers,
                method='POST'
            )
            
            with urllib.request.urlopen(req) as response:
                if response.status != 200:
                    print(f"LINE API error for article {article['URL']}: {response.status}")
                else:
                    print(f"LINE message sent successfully for article: {article['URL']}")
            
            time.sleep(1)
            
        except Exception as e:
            print(f"Error sending LINE message for article {article['URL']}: {e}")
            
def save_to_dynamodb(articles):
    """記事をDynamoDBに保存し、新規記事をLINEに通知"""
    new_articles = []
    processed_count = 0

    for article in articles:
        try:
            response = table.get_item(Key={'URL': article['URL'], '公開日': article['公開日']})
            
            if 'Item' not in response:
                service_name = extract_service_name(article['タイトル'])
                bedrock_result = process_article_with_bedrock(article['タイトル'])
                
                item = {
                    'URL': article['URL'],
                    'サービス名': service_name,
                    '公開日': article['公開日'],
                    '更新内容': bedrock_result['summary']
                }

                table.put_item(Item=item)
                new_articles.append(item)
                processed_count += 1
                print(f"Saved new article for service: {service_name}")

        except Exception as e:
            print(f"Error processing article: {e}")
            continue

    if new_articles:
        send_line_message(new_articles)

    return processed_count

def lambda_handler(event, context):
    """Lambda関数のメインハンドラー"""
    try:
        articles = get_rss_feed()
        if not articles:
            return {
                'statusCode': 400,
                'body': json.dumps({
                    'message': 'No articles fetched',
                    'count': 0
                }, ensure_ascii=False)
            }

        processed_count = save_to_dynamodb(articles)
        
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': 'Processing completed',
                'total_articles': len(articles),
                'new_articles': processed_count
            }, ensure_ascii=False)
        }

    except Exception as e:
        print(f"Error in lambda_handler: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({
                'error': str(e)
            }, ensure_ascii=False)
        }