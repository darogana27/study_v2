#!/bin/bash

# PFC „É™„ÇΩ„Éº„ÇπËµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà („Çø„Ç∞„Éô„Éº„ÇπÁâà)
# ‰ΩøÁî®ÊñπÊ≥ï: ./start-resources-v2.sh

set -e

echo "üöÄ PFC „É™„ÇΩ„Éº„ÇπËµ∑Âãï„ÇíÈñãÂßã„Åó„Åæ„Åô..."

# ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™Á¢∫Ë™ç„Å®infrastructure„Éá„Ç£„É¨„ÇØ„Éà„É™„Å∏„ÅÆÁßªÂãï
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
INFRASTRUCTURE_DIR="$PROJECT_ROOT/infrastructure"

if [[ ! -f "$INFRASTRUCTURE_DIR/terraform.tf" ]]; then
    echo "‚ùå infrastructure/terraform.tf „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
    echo "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Åã„ÇâÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    exit 1
fi

echo "üìÅ ‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™: $INFRASTRUCTURE_DIR"

# „Çø„Ç∞Ë®≠ÂÆö
PRODUCT_TAG="pfc"
REGION="ap-northeast-1"

# 1. LambdaÈñ¢Êï∞„ÇíÊúâÂäπÂåñÔºà„Çø„Ç∞„Éô„Éº„ÇπÊ§úÂá∫Ôºâ
echo "‚ö° LambdaÈñ¢Êï∞„ÇíÊúâÂäπÂåñ„Åó„Å¶„ÅÑ„Åæ„Åô..."
LAMBDA_ARNS=$(aws resourcegroupstaggingapi get-resources \
    --tag-filters "Key=Product,Values=$PRODUCT_TAG" \
    --resource-type-filters "lambda:function" \
    --region $REGION \
    --query "ResourceTagMappingList[].ResourceARN" \
    --output text 2>/dev/null || echo "")

if [[ -n "$LAMBDA_ARNS" ]]; then
    for arn in $LAMBDA_ARNS; do
        # ARN„Åã„ÇâÈñ¢Êï∞Âêç„ÇíÊäΩÂá∫
        FUNCTION_NAME=$(echo $arn | cut -d':' -f7)
        
        echo "  - $FUNCTION_NAME „ÇíÊúâÂäπÂåñ‰∏≠..."
        aws lambda update-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --environment Variables='{DYNAMODB_TABLE_NAME=pfc-ParkingSpots-table,ENABLE_TOKYO_WIDE=true,MAX_PARALLEL_WARDS=5,BATCH_SIZE=100,ENABLE_GEOHASH=true}' \
            --region $REGION 2>/dev/null && echo "    ‚úÖ $FUNCTION_NAME ÊúâÂäπÂåñÂÆå‰∫Ü" || echo "    ‚ö†Ô∏è  $FUNCTION_NAME ÊúâÂäπÂåñÂ§±Êïó"
    done
else
    echo "    ‚ö†Ô∏è  PFC Lambda functions not found"
fi

# 2. API Gateway „Çπ„ÉÜ„Éº„Ç∏„ÇíÂÜç‰ΩúÊàêÔºà„Çø„Ç∞„Éô„Éº„ÇπÊ§úÂá∫Ôºâ
echo "üîó API Gateway „Çπ„ÉÜ„Éº„Ç∏„ÇíÂÜç‰ΩúÊàê„Åó„Å¶„ÅÑ„Åæ„Åô..."
API_ARNS=$(aws resourcegroupstaggingapi get-resources \
    --tag-filters "Key=Product,Values=$PRODUCT_TAG" \
    --resource-type-filters "apigateway:restapis,apigateway:apis" \
    --region $REGION \
    --query "ResourceTagMappingList[?!contains(ResourceARN, '/stages/')].ResourceARN" \
    --output text 2>/dev/null || echo "")

if [[ -n "$API_ARNS" ]]; then
    for arn in $API_ARNS; do
        # arn:aws:apigateway:region::/apis/api-id
        API_ID=$(echo $arn | cut -d'/' -f3)
        STAGE_NAME="dev"  # „Éá„Éï„Ç©„É´„Éà„Çπ„ÉÜ„Éº„Ç∏Âêç
        
        echo "  - API $API_ID „ÅÆ„Çπ„ÉÜ„Éº„Ç∏ $STAGE_NAME „ÇíÁ¢∫Ë™ç‰∏≠..."
        
        # „Çπ„ÉÜ„Éº„Ç∏„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        STAGE_EXISTS=$(aws apigatewayv2 get-stage \
            --api-id "$API_ID" \
            --stage-name "$STAGE_NAME" \
            --region $REGION 2>/dev/null && echo "exists" || echo "not_exists")
        
        if [[ "$STAGE_EXISTS" == "not_exists" ]]; then
            # „Çπ„ÉÜ„Éº„Ç∏„ÇíÂÜç‰ΩúÊàê
            aws apigatewayv2 create-stage \
                --api-id "$API_ID" \
                --stage-name "$STAGE_NAME" \
                --auto-deploy \
                --region $REGION 2>/dev/null && echo "    ‚úÖ „Çπ„ÉÜ„Éº„Ç∏ÂÜç‰ΩúÊàêÂÆå‰∫Ü" || echo "    ‚ö†Ô∏è  „Çπ„ÉÜ„Éº„Ç∏‰ΩúÊàêÂ§±Êïó"
        else
            echo "    ‚ÑπÔ∏è  „Çπ„ÉÜ„Éº„Ç∏„ÅØÊó¢„Å´Â≠òÂú®„Åó„Å¶„ÅÑ„Åæ„Åô"
        fi
    done
else
    # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Áõ¥Êé•APIÂêç„ÅßÊ§úÁ¥¢
    echo "    üîÑ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Áõ¥Êé•APIÊ§úÁ¥¢‰∏≠..."
    API_ID=$(aws apigatewayv2 get-apis --query "Items[?contains(Name,'pfc')].ApiId" --output text --region $REGION 2>/dev/null || echo "")
    if [[ -n "$API_ID" && "$API_ID" != "None" ]]; then
        echo "  - API $API_ID „ÅÆ„Çπ„ÉÜ„Éº„Ç∏ dev „ÇíÁ¢∫Ë™ç‰∏≠..."
        STAGE_EXISTS=$(aws apigatewayv2 get-stage --api-id "$API_ID" --stage-name "dev" --region $REGION 2>/dev/null && echo "exists" || echo "not_exists")
        
        if [[ "$STAGE_EXISTS" == "not_exists" ]]; then
            aws apigatewayv2 create-stage \
                --api-id "$API_ID" \
                --stage-name "dev" \
                --auto-deploy \
                --region $REGION 2>/dev/null && echo "    ‚úÖ „Çπ„ÉÜ„Éº„Ç∏ÂÜç‰ΩúÊàêÂÆå‰∫Ü" || echo "    ‚ö†Ô∏è  „Çπ„ÉÜ„Éº„Ç∏‰ΩúÊàêÂ§±Êïó"
        else
            echo "    ‚ÑπÔ∏è  „Çπ„ÉÜ„Éº„Ç∏„ÅØÊó¢„Å´Â≠òÂú®„Åó„Å¶„ÅÑ„Åæ„Åô"
        fi
    else
        echo "    ‚ö†Ô∏è  PFC API Gateway not found"
    fi
fi

# 3. CloudFront Distribution „ÇíÊúâÂäπÂåñÔºà„Çø„Ç∞„Éô„Éº„ÇπÊ§úÂá∫Ôºâ
echo "üåê CloudFront Distribution „ÇíÊúâÂäπÂåñ„Åó„Å¶„ÅÑ„Åæ„Åô..."
CLOUDFRONT_ARNS=$(aws resourcegroupstaggingapi get-resources \
    --tag-filters "Key=Product,Values=$PRODUCT_TAG" \
    --resource-type-filters "cloudfront:distribution" \
    --region us-east-1 \
    --query "ResourceTagMappingList[].ResourceARN" \
    --output text 2>/dev/null || echo "")

if [[ -n "$CLOUDFRONT_ARNS" ]]; then
    for arn in $CLOUDFRONT_ARNS; do
        # ARN„Åã„ÇâDistribution ID„ÇíÊäΩÂá∫
        DISTRIBUTION_ID=$(echo $arn | cut -d'/' -f2)
        
        echo "  - Distribution $DISTRIBUTION_ID „ÇíÊúâÂäπÂåñ‰∏≠..."
        
        # ÁèæÂú®„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÁ¢∫Ë™ç
        CURRENT_STATUS=$(aws cloudfront get-distribution \
            --id "$DISTRIBUTION_ID" \
            --query "Distribution.DistributionConfig.Enabled" \
            --output text \
            --region us-east-1 2>/dev/null || echo "")
        
        if [[ "$CURRENT_STATUS" == "False" ]]; then
            # DistributionË®≠ÂÆö„ÇíÂèñÂæó„Åó„Å¶ETag„Çí‰øùÂ≠ò
            ETAG=$(aws cloudfront get-distribution-config \
                --id "$DISTRIBUTION_ID" \
                --region us-east-1 \
                --query "ETag" \
                --output text 2>/dev/null || echo "")
            
            # DistributionË®≠ÂÆö„ÇíJSON„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
            CONFIG_JSON=$(aws cloudfront get-distribution-config \
                --id "$DISTRIBUTION_ID" \
                --region us-east-1 \
                --query "DistributionConfig" 2>/dev/null || echo "")
            
            if [[ -n "$ETAG" && -n "$CONFIG_JSON" ]]; then
                echo "$CONFIG_JSON" | jq '.Enabled = true' > /tmp/distribution-enabled.json
                
                # ÊúâÂäπÂåñ„ÇíÂÆüË°å
                aws cloudfront update-distribution \
                    --id "$DISTRIBUTION_ID" \
                    --distribution-config file:///tmp/distribution-enabled.json \
                    --if-match "$ETAG" \
                    --region us-east-1 2>/dev/null && echo "    ‚úÖ CloudFrontÊúâÂäπÂåñÈñãÂßãÔºàÂÆå‰∫Ü„Åæ„Åß15-20ÂàÜÔºâ" || echo "    ‚ö†Ô∏è  CloudFrontÊúâÂäπÂåñÂ§±Êïó"
                
                # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´ÂâäÈô§
                rm -f /tmp/distribution-enabled.json
            else
                echo "    ‚ö†Ô∏è  CloudFrontË®≠ÂÆö„ÅÆÂèñÂæó„Å´Â§±Êïó"
            fi
        else
            echo "    ‚ÑπÔ∏è  Distribution $DISTRIBUTION_ID „ÅØÊó¢„Å´ÊúâÂäπ„Åß„Åô"
        fi
    done
else
    echo "    ‚ö†Ô∏è  PFC CloudFront Distribution not found"
fi

# 4. EventBridge Scheduler „ÇíÊúâÂäπÂåñÔºà„Çø„Ç∞„Éô„Éº„ÇπÊ§úÂá∫Ôºâ
echo "üìÖ EventBridge Scheduler „ÇíÊúâÂäπÂåñ„Åó„Å¶„ÅÑ„Åæ„Åô..."
SCHEDULER_ARNS=$(aws resourcegroupstaggingapi get-resources \
    --tag-filters "Key=Product,Values=$PRODUCT_TAG" \
    --resource-type-filters "scheduler:schedule" \
    --region $REGION \
    --query "ResourceTagMappingList[].ResourceARN" \
    --output text 2>/dev/null || echo "")

if [[ -n "$SCHEDULER_ARNS" ]]; then
    for arn in $SCHEDULER_ARNS; do
        # ARN„Åã„Çâ„Çπ„Ç±„Ç∏„É•„Éº„É´Âêç„Å®„Ç∞„É´„Éº„ÉóÂêç„ÇíÊäΩÂá∫
        GROUP_NAME=$(echo $arn | cut -d'/' -f2)
        SCHEDULE_NAME=$(echo $arn | cut -d'/' -f3)
        
        echo "  - $SCHEDULE_NAME „ÇíÊúâÂäπÂåñ‰∏≠..."
        
        # ÁèæÂú®„ÅÆË®≠ÂÆö„ÇíÂèñÂæó
        CURRENT_CONFIG=$(aws scheduler get-schedule \
            --name "$SCHEDULE_NAME" \
            --group-name "$GROUP_NAME" \
            --region $REGION 2>/dev/null || echo "")
        
        if [[ -n "$CURRENT_CONFIG" ]]; then
            # ÂøÖË¶Å„Å™Ë®≠ÂÆö„ÇíÊäΩÂá∫
            SCHEDULE_EXPR=$(echo "$CURRENT_CONFIG" | jq -r '.ScheduleExpression')
            FLEXIBLE_TIME=$(echo "$CURRENT_CONFIG" | jq -r '.FlexibleTimeWindow')
            TARGET_CONFIG=$(echo "$CURRENT_CONFIG" | jq -r '.Target')
            
            # „Çπ„Ç±„Ç∏„É•„Éº„É´„ÇíÊúâÂäπÂåñ
            aws scheduler update-schedule \
                --name "$SCHEDULE_NAME" \
                --group-name "$GROUP_NAME" \
                --state "ENABLED" \
                --schedule-expression "$SCHEDULE_EXPR" \
                --flexible-time-window "$FLEXIBLE_TIME" \
                --target "$TARGET_CONFIG" \
                --region $REGION 2>/dev/null && echo "    ‚úÖ $SCHEDULE_NAME ÊúâÂäπÂåñÂÆå‰∫Ü" || echo "    ‚ö†Ô∏è  $SCHEDULE_NAME ÊúâÂäπÂåñÂ§±Êïó"
        fi
    done
else
    # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Áõ¥Êé•SchedulerÂêç„ÅßÊ§úÁ¥¢
    echo "    üîÑ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Áõ¥Êé•SchedulerÊ§úÁ¥¢‰∏≠..."
    SCHEDULES=$(aws scheduler list-schedules --group-name "pfc-scheduler-group" --region $REGION --query "Schedules[?contains(Name,'pfc')].{Name:Name,State:State}" --output text 2>/dev/null || echo "")
    
    if [[ -n "$SCHEDULES" ]]; then
        echo "$SCHEDULES" | while read -r name state; do
            if [[ -n "$name" ]]; then
                echo "  - $name „ÇíÊúâÂäπÂåñ‰∏≠..."
                
                # ÁèæÂú®„ÅÆË®≠ÂÆö„ÇíÂèñÂæó
                CURRENT_CONFIG=$(aws scheduler get-schedule \
                    --name "$name" \
                    --group-name "pfc-scheduler-group" \
                    --region $REGION 2>/dev/null || echo "")
                
                if [[ -n "$CURRENT_CONFIG" ]]; then
                    # ÂøÖË¶Å„Å™Ë®≠ÂÆö„ÇíÊäΩÂá∫
                    SCHEDULE_EXPR=$(echo "$CURRENT_CONFIG" | jq -r '.ScheduleExpression')
                    FLEXIBLE_TIME=$(echo "$CURRENT_CONFIG" | jq -r '.FlexibleTimeWindow')
                    TARGET_CONFIG=$(echo "$CURRENT_CONFIG" | jq -r '.Target')
                    
                    # „Çπ„Ç±„Ç∏„É•„Éº„É´„ÇíÊúâÂäπÂåñ
                    aws scheduler update-schedule \
                        --name "$name" \
                        --group-name "pfc-scheduler-group" \
                        --state "ENABLED" \
                        --schedule-expression "$SCHEDULE_EXPR" \
                        --flexible-time-window "$FLEXIBLE_TIME" \
                        --target "$TARGET_CONFIG" \
                        --region $REGION 2>/dev/null && echo "    ‚úÖ $name ÊúâÂäπÂåñÂÆå‰∫Ü" || echo "    ‚ö†Ô∏è  $name ÊúâÂäπÂåñÂ§±Êïó"
                fi
            fi
        done
    else
        echo "    ‚ö†Ô∏è  PFC Scheduler not found"
    fi
fi

# 5. ÂàùÂõû„Éá„Éº„ÇøÂèéÈõÜ„ÇíÂÆüË°åÔºà„Éá„Éº„ÇøÂèéÈõÜLambdaÈñ¢Êï∞„ÅÆ„ÅøÔºâ
echo "üíæ ÂàùÂõû„Éá„Éº„ÇøÂèéÈõÜ„ÇíÂÆüË°å„Åó„Å¶„ÅÑ„Åæ„Åô..."
DATA_COLLECTOR_FUNCTION=$(aws resourcegroupstaggingapi get-resources \
    --tag-filters "Key=Product,Values=$PRODUCT_TAG" "Key=Name,Values=pfc-parking-data-collector" \
    --resource-type-filters "lambda:function" \
    --region $REGION \
    --query "ResourceTagMappingList[0].ResourceARN" \
    --output text 2>/dev/null || echo "")

if [[ -n "$DATA_COLLECTOR_FUNCTION" && "$DATA_COLLECTOR_FUNCTION" != "None" ]]; then
    FUNCTION_NAME=$(echo $DATA_COLLECTOR_FUNCTION | cut -d':' -f7)
    
    aws lambda invoke \
        --function-name "$FUNCTION_NAME" \
        --region $REGION \
        /tmp/lambda-response.json 2>/dev/null && echo "    ‚úÖ ÂàùÂõû„Éá„Éº„ÇøÂèéÈõÜÈñãÂßã" || echo "    ‚ö†Ô∏è  „Éá„Éº„ÇøÂèéÈõÜÂÆüË°åÂ§±Êïó"
    
    # „É¨„Çπ„Éù„É≥„ÇπÁ¢∫Ë™ç
    if [[ -f "/tmp/lambda-response.json" ]]; then
        echo "    üìä „Éá„Éº„ÇøÂèéÈõÜÁµêÊûú:"
        cat /tmp/lambda-response.json | jq -r '.body' 2>/dev/null | jq '.' 2>/dev/null || cat /tmp/lambda-response.json
        rm -f /tmp/lambda-response.json
    fi
else
    echo "    ‚ö†Ô∏è  „Éá„Éº„ÇøÂèéÈõÜLambdaÈñ¢Êï∞„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
fi

echo ""
echo "üéØ „É™„ÇΩ„Éº„ÇπËµ∑ÂãïÁä∂Ê≥Å:"
echo "‚úÖ LambdaÈñ¢Êï∞: „Çø„Ç∞„Éô„Éº„ÇπÊ§úÂá∫„ÉªÂÖ®„Å¶ÊúâÂäπÂåñÊ∏à„Åø"
echo "‚úÖ API Gateway: „Çø„Ç∞„Éô„Éº„ÇπÊ§úÂá∫„Éª„Çπ„ÉÜ„Éº„Ç∏ÂÜç‰ΩúÊàêÊ∏à„Åø"
echo "‚úÖ CloudFront: „Çø„Ç∞„Éô„Éº„ÇπÊ§úÂá∫„ÉªÊúâÂäπÂåñÈñãÂßã"
echo "‚úÖ EventBridge Scheduler: „Çø„Ç∞„Éô„Éº„ÇπÊ§úÂá∫„Éª10ÂàÜÈñìÈöî„ÅßÂÆüË°å‰∏≠"
echo "‚úÖ ÂàùÂõû„Éá„Éº„ÇøÂèéÈõÜ: ÂÆüË°åÊ∏à„Åø"
echo ""
echo "üåê „Ç¢„ÇØ„Çª„Çπ URL:"
echo "   CloudFront: https://d2ubjdigebrmfd.cloudfront.net"
echo "   API Gateway: https://xckspu9thj.execute-api.ap-northeast-1.amazonaws.com"
echo ""
echo "‚ö†Ô∏è  Ê≥®ÊÑè: CloudFront„ÅÆÊúâÂäπÂåñ„ÅØ15-20ÂàÜ„Åã„Åã„Çä„Åæ„Åô"
echo "üìù ÂÅúÊ≠¢ÊôÇ„ÅØ ./stop-resources-v2.sh „ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"