import json
import os
import boto3
from typing import Dict, List, Any
from datetime import datetime
from decimal import Decimal

# AWS „ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ
dynamodb = boto3.resource('dynamodb')
bedrock_runtime = boto3.client('bedrock-runtime', region_name='ap-northeast-1')

# Áí∞Â¢ÉÂ§âÊï∞
TABLE_NAME = os.environ.get('DYNAMODB_TABLE_NAME', 'pfc-ParkingSpots-table')
MODEL_ID = os.environ.get('BEDROCK_MODEL_ID', 'anthropic.claude-3-sonnet-20240229-v1:0')

# „Ç∑„Çπ„ÉÜ„É†„Éó„É≠„É≥„Éó„Éà
SYSTEM_PROMPT = """„ÅÇ„Å™„Åü„ÅØÊ±†Ë¢ã„Ç®„É™„Ç¢„ÅÆÈßêËº™Â†¥Ê°àÂÜÖ„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇ
„É¶„Éº„Ç∂„Éº„ÅÆË≥™Âïè„Å´ÂØæ„Åó„Å¶„ÄÅÊèê‰æõ„Åï„Çå„ÅüÈßêËº™Â†¥„Éá„Éº„Çø„Åã„ÇâÊúÄÈÅ©„Å™ÈßêËº™Â†¥„ÇíÊèêÊ°à„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

‰ª•‰∏ã„ÅÆÁÇπ„ÇíËÄÉÊÖÆ„Åó„Å¶ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
- Á©∫„ÅçÁä∂Ê≥ÅÔºàavailable/totalÔºâ
- Ë∑ùÈõ¢„Å®ÂæíÊ≠©ÊôÇÈñì
- ÊñôÈáëÔºàÊôÇÈñì/Êó•/ÊúàÔºâ
- Âñ∂Ê•≠ÊôÇÈñì
- ÂØæÂøúËªäÁ®Æ

ÂõûÁ≠î„ÅØË¶™Âàá„ÅßÂàÜ„Åã„Çä„ÇÑ„Åô„Åè„ÄÅÁµµÊñáÂ≠ó„ÇíÈÅ©Â∫¶„Å´‰ΩøÁî®„Åó„Å¶„Éï„É¨„É≥„Éâ„É™„Éº„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
ÂøÖ„ÅöÂÖ∑‰ΩìÁöÑ„Å™ÈßêËº™Â†¥Âêç„ÇíÊåô„Åí„Å¶ÊèêÊ°à„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"""


def lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    """
    „É°„Ç§„É≥„ÅÆLambda„Éè„É≥„Éâ„É©„Éº
    """
    try:
        # „É™„ÇØ„Ç®„Çπ„Éà„Éú„Éá„Ç£„ÅÆËß£Êûê
        body = json.loads(event.get('body', '{}'))
        user_message = body.get('message', '')
        
        if not user_message:
            return create_response(400, {'error': '„É°„ÉÉ„Çª„Éº„Ç∏„ÅåÂøÖË¶Å„Åß„Åô'})
        
        # DynamoDB„Åã„ÇâÈßêËº™Â†¥„Éá„Éº„Çø„ÇíÂèñÂæó
        parking_data = get_parking_data()
        
        # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂøúÁ≠î„Çí‰ΩøÁî®ÔºàBedrockË®≠ÂÆöÂæå„Å´‰øÆÊ≠£‰∫àÂÆöÔºâ
        response_data = get_fallback_response(user_message, parking_data)
        
        return create_response(200, response_data)
        
    except Exception as e:
        print(f"Error: {str(e)}")
        return create_response(500, {
            'error': '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
            'message': '„Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ'
        })


def get_parking_data() -> List[Dict[str, Any]]:
    """
    DynamoDB„Åã„ÇâÈßêËº™Â†¥„Éá„Éº„Çø„ÇíÂèñÂæó
    """
    table = dynamodb.Table(TABLE_NAME)
    
    try:
        response = table.scan()
        items = response.get('Items', [])
        
        # Decimal„ÇíÈÄöÂ∏∏„ÅÆÊï∞ÂÄ§„Å´Â§âÊèõ
        return [convert_decimal(item) for item in items]
        
    except Exception as e:
        print(f"DynamoDB Error: {str(e)}")
        return []


def convert_decimal(obj: Any) -> Any:
    """
    DynamoDB„ÅÆDecimalÂûã„ÇíÈÄöÂ∏∏„ÅÆÊï∞ÂÄ§Âûã„Å´Â§âÊèõ
    """
    if isinstance(obj, list):
        return [convert_decimal(item) for item in obj]
    elif isinstance(obj, dict):
        return {key: convert_decimal(value) for key, value in obj.items()}
    elif isinstance(obj, Decimal):
        if obj % 1 == 0:
            return int(obj)
        else:
            return float(obj)
    else:
        return obj


def generate_bedrock_response(user_message: str, parking_data: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Bedrock„Çí‰ΩøÁî®„Åó„Å¶„ÉÅ„É£„ÉÉ„ÉàÂøúÁ≠î„ÇíÁîüÊàê
    """
    # ÈßêËº™Â†¥„Éá„Éº„Çø„ÇíÊñáÂ≠óÂàóÂåñ
    parking_data_str = '\n'.join([
        f"- {p['name']}: Á©∫„Åç{p['capacity']['available']}/{p['capacity']['total']}Âè∞, "
        f"ÂæíÊ≠©{p['walkTime']}ÂàÜ({p['distance']}m), {p['fees']['daily']}ÂÜÜ/Êó•, {p['openHours']}"
        for p in parking_data
    ])
    
    # „Éó„É≠„É≥„Éó„Éà„ÅÆÊßãÁØâ
    prompt = f"""{SYSTEM_PROMPT}

ÁèæÂú®„ÅÆÈßêËº™Â†¥„Éá„Éº„ÇøÔºö
{parking_data_str}

„É¶„Éº„Ç∂„Éº„ÅÆË≥™Âïè: {user_message}

„Åì„ÅÆË≥™Âïè„Å´ÂØæ„Åó„Å¶„ÄÅÊúÄÈÅ©„Å™ÈßêËº™Â†¥„ÇíÊèêÊ°à„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
„Åæ„Åü„ÄÅÂøúÁ≠î„Å´„ÅØ‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„ÅßËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
{{
    "message": "„É¶„Éº„Ç∂„Éº„Å∏„ÅÆÂøúÁ≠î„É°„ÉÉ„Çª„Éº„Ç∏",
    "recommendedParkingIds": ["Êé®Â•®„Åô„ÇãÈßêËº™Â†¥„ÅÆIDÔºàÊúÄÂ§ß3„Å§Ôºâ"],
    "searchType": "available|nearest|cheapest|24hours|general"
}}"""
    
    try:
        # Bedrock APIÂëº„Å≥Âá∫„Åó
        response = bedrock_runtime.invoke_model(
            modelId=MODEL_ID,
            contentType='application/json',
            accept='application/json',
            body=json.dumps({
                "anthropic_version": "bedrock-2023-05-31",
                "max_tokens": 1000,
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": 0.7,
                "top_p": 0.9
            })
        )
        
        # „É¨„Çπ„Éù„É≥„Çπ„ÅÆËß£Êûê
        response_body = json.loads(response['body'].read())
        claude_response = json.loads(response_body['content'][0]['text'])
        
        # Êé®Â•®„Åï„Çå„ÅüÈßêËº™Â†¥„ÅÆË©≥Á¥∞ÊÉÖÂ†±„ÇíÂèñÂæó
        recommended_lots = [
            p for p in parking_data 
            if p['id'] in claude_response['recommendedParkingIds']
        ]
        
        # „Çµ„Ç∏„Çß„Çπ„Ç∑„Éß„É≥„ÇíÁîüÊàê
        suggestions = generate_suggestions(claude_response['searchType'])
        
        return {
            'response': claude_response['message'],
            'type': claude_response['searchType'],
            'parkingLots': recommended_lots,
            'suggestions': suggestions,
            'totalFound': len(recommended_lots)
        }
        
    except Exception as e:
        print(f"Bedrock Error: {str(e)}")
        # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜ
        return get_fallback_response(user_message, parking_data)


def generate_suggestions(search_type: str) -> List[str]:
    """
    Ê§úÁ¥¢„Çø„Ç§„Éó„Å´Âøú„Åò„Åü„Çµ„Ç∏„Çß„Çπ„Ç∑„Éß„É≥„ÇíÁîüÊàê
    """
    suggestion_map = {
        'available': ['„ÇÇ„Å£„Å®Á©∫„ÅÑ„Å¶„ÅÑ„ÇãÂ†¥ÊâÄ', '24ÊôÇÈñìÂñ∂Ê•≠', 'ÊñôÈáë„ÅåÂÆâ„ÅÑÈ†Ü'],
        'nearest': ['Á©∫„ÅçÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç', 'ÊñôÈáë„ÇíÊØîËºÉ', 'Âñ∂Ê•≠ÊôÇÈñì„ÇíÁ¢∫Ë™ç'],
        'cheapest': ['‰∏ÄÁï™Ëøë„ÅÑÂ†¥ÊâÄ', 'Á©∫„ÅçÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç', 'ÊúàÊ•µÊñôÈáë'],
        '24hours': ['Á©∫„ÅÑ„Å¶„ÅÑ„ÇãÂ†¥ÊâÄ', 'ÈßÖ„Åã„ÇâËøë„ÅÑÈ†Ü', 'ÊñôÈáë„ÇíÁ¢∫Ë™ç'],
        'general': ['Á©∫„ÅÑ„Å¶„ÅÑ„ÇãÈßêËº™Â†¥', '‰∏ÄÁï™Ëøë„ÅÑÈßêËº™Â†¥', '24ÊôÇÈñìÂñ∂Ê•≠', 'ÊñôÈáë„ÅåÂÆâ„ÅÑÈ†Ü']
    }
    
    return suggestion_map.get(search_type, suggestion_map['general'])


def get_fallback_response(message: str, parking_data: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Bedrock„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜ
    """
    lower_message = message.lower()
    
    # „Ç≠„Éº„ÉØ„Éº„Éâ„Éô„Éº„Çπ„ÅÆÁ∞°Êòì„Éû„ÉÉ„ÉÅ„É≥„Ç∞
    if 'Á©∫' in message or 'Á©∫„Åç' in message or 'available' in lower_message:
        available = sorted(
            [p for p in parking_data if p['capacity']['available'] > 10],
            key=lambda x: x['capacity']['available'],
            reverse=True
        )[:3]
        
        return {
            'response': f'ÁèæÂú®„ÄÅ{len(available)}‰ª∂„ÅÆÈßêËº™Â†¥„Å´Á©∫„Åç„Åå„ÅÇ„Çä„Åæ„ÅôÔºÅüö≤',
            'type': 'available',
            'parkingLots': available,
            'suggestions': ['„ÇÇ„Å£„Å®Á©∫„ÅÑ„Å¶„ÅÑ„ÇãÂ†¥ÊâÄ', '24ÊôÇÈñìÂñ∂Ê•≠', 'ÊñôÈáë„ÅåÂÆâ„ÅÑÈ†Ü']
        }
    
    elif 'Ëøë' in message or 'ÊúÄÂØÑ' in message or 'nearest' in lower_message:
        nearest = sorted(parking_data, key=lambda x: x['distance'])[:3]
        
        return {
            'response': 'Ê±†Ë¢ãÈßÖ„Åã„ÇâËøë„ÅÑÈ†Ü„Å´Ë°®Á§∫„Åó„Åæ„Åô',
            'type': 'nearest',
            'parkingLots': nearest,
            'suggestions': ['Á©∫„ÅçÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç', 'ÊñôÈáë„ÇíÊØîËºÉ', 'Âñ∂Ê•≠ÊôÇÈñì„ÇíÁ¢∫Ë™ç']
        }
    
    elif 'ÂÆâ' in message or 'cheap' in lower_message or 'ÊñôÈáë' in message:
        cheapest = sorted(parking_data, key=lambda x: x['fees']['daily'])[:3]
        
        return {
            'response': 'ÊñôÈáë„ÅåÂÆâ„ÅÑÈ†Ü„Å´Ë°®Á§∫„Åó„Åæ„ÅôÔºà1Êó•ÊñôÈáëÔºâ',
            'type': 'cheapest',
            'parkingLots': cheapest,
            'suggestions': ['‰∏ÄÁï™Ëøë„ÅÑÂ†¥ÊâÄ', 'Á©∫„ÅçÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç', 'ÊúàÊ•µÊñôÈáë']
        }
    
    elif '24ÊôÇÈñì' in message or 'Ê∑±Â§ú' in message or 'Â§ú' in message:
        all_day = [p for p in parking_data if '24ÊôÇÈñì' in p['openHours']]
        
        return {
            'response': f'24ÊôÇÈñìÂñ∂Ê•≠„ÅÆÈßêËº™Â†¥„Åå{len(all_day)}‰ª∂Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü',
            'type': '24hours',
            'parkingLots': all_day,
            'suggestions': ['Á©∫„ÅÑ„Å¶„ÅÑ„ÇãÂ†¥ÊâÄ', 'ÈßÖ„Åã„ÇâËøë„ÅÑÈ†Ü', 'ÊñôÈáë„ÇíÁ¢∫Ë™ç']
        }
    
    # „Éá„Éï„Ç©„É´„ÉàÂøúÁ≠î
    return {
        'response': 'Ê±†Ë¢ã„Ç®„É™„Ç¢„ÅÆÈßêËº™Â†¥„Çí„ÅîÊ°àÂÜÖ„Åó„Åæ„Åô„ÄÇ„Å©„ÅÆ„Çà„ÅÜ„Å™Êù°‰ª∂„Åß„ÅäÊé¢„Åó„Åß„Åô„ÅãÔºü',
        'type': 'general',
        'parkingLots': parking_data[:3],
        'suggestions': ['Á©∫„ÅÑ„Å¶„ÅÑ„ÇãÈßêËº™Â†¥', '‰∏ÄÁï™Ëøë„ÅÑÈßêËº™Â†¥', '24ÊôÇÈñìÂñ∂Ê•≠', 'ÊñôÈáë„ÅåÂÆâ„ÅÑÈ†Ü']
    }


def create_response(status_code: int, body: Dict[str, Any]) -> Dict[str, Any]:
    """
    API Gateway„É¨„Çπ„Éù„É≥„Çπ„Çí‰ΩúÊàê
    """
    return {
        'statusCode': status_code,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': 'Content-Type',
            'Access-Control-Allow-Methods': 'GET,POST,OPTIONS'
        },
        'body': json.dumps(body, ensure_ascii=False)
    }